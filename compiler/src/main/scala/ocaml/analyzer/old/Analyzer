import ocaml.trees._
import ocaml.types._
import ocaml.enviroment._
import scala.reflect.ClassTag

case class AnalyzerResult(_type: Types.Type, enviroment: Enviroment) extends PrettyPrint {
  override def toString() = {
    "AnalyzerResult(" + _type + "," + enviroment + ")"
  }

  def prettyPrint: String = {
    enviroment.prettyPrint + "\n- :" + _type.prettyPrint
  }
}

object Analyzer {
  type T = Option[AnalyzerResult]

  def canBeType[Q: ClassTag](value: Any): Boolean = {
    if (value.getClass == classOf[Types.Unknown]) true
    else implicitly[ClassTag[Q]].runtimeClass.isInstance(value)
  }

  def lookupTypeStr(value: String) = {
    value match {
      case "int"   => Types.Integer()
      case "float" => Types.Float()
      case _       => Types.Unknown("'" + value)
    }
  }

  def lookupType(identifier: Trees.Identifier) = {
    identifier.varibleType match {
      case Some(v) if v == "int"   => Types.Integer()
      case Some(v) if v == "float" => Types.Float()
      case _                       => Types.Unknown("'" + identifier.value)
    }
  }

  def evaluate(tree: Trees.LetBinding, enviroment: Enviroment): T = {
    log(tree, enviroment)

    evaluate(
      tree.expression,
      enviroment.copyWith(
        ValEntry(tree.identifier.value, lookupType(tree.identifier))
      )
    ) match {
      case Some(value) => {
        val _type = value.enviroment.lookup(tree.identifier.value).get._type
        Some(AnalyzerResult(Types.Function(_type, value._type), value.enviroment.withType(tree.identifier, _type)))
      }
      case None => {
        None
      }
    }
  }

  def evaluate(tree: Trees.LetBindingExpr, enviroment: Enviroment): T = {

    evaluate(tree.value, enviroment) match {
      case Some(value) =>
        evaluate(
          tree.expr,
          value.enviroment.copyWith(
            ValEntry(tree.identifier.value, value._type)
          )
        ) match {
          case Some(value) => {
            Some(AnalyzerResult(value._type, enviroment))
          }
          case _ => None
        }
      case _ => None
    }

  }

  def evaluate(tree: Trees.Recursive, enviroment: Enviroment): T = {
    log(tree, enviroment)
    Some(AnalyzerResult(Types.Function(Types.Unknown("a"), Types.Unknown("b")), enviroment))
  }

  def evaluate(tree: Trees.Tuple, enviroment: Enviroment): T = {
    val _type = Types.Tuple(
      tree.entries.map((entry) => {
        evaluate(entry, enviroment).get._type
      }),
      List()
    );

    Some(
      AnalyzerResult(
        _type,
        enviroment
      )
    )
  }

  def evaluate(tree: Trees.ArrayList, enviroment: Enviroment): T = {
    val types = tree.entries.map((entry) => {
      evaluate(entry, enviroment) match {
        case None    => return None
        case Some(v) => v._type
      }
    })

    if (!types.forall(t => t == types(0))) return None

    Some(
      AnalyzerResult(
        Types.ArrayList(types(0)),
        enviroment
      )
    )
  }

  def canBeType(a: Types.Type, b: Types.Type, enviroment: Enviroment): Option[Types.Type] = {
    if (a == b) return Some(a);

    val out = (a, b) match {
      case (a: Types.Tuple, b: Types.Tuple)
          if a.fields.zip(b.fields).forall((t) => canBeType(t._1, t._2, enviroment) != None) => {
        Some(Types.Tuple(a.fields.zip(b.fields).map((t) => canBeType(t._1, t._2, enviroment).get), List()))
      }

      case (a: Types.Primitive, b: Types.Unknown) => {
        return Some(a)
      }

      case (a: Types.Unknown, b: Types.Primitive) => {
        return Some(b)
      }

      case (a: Types.Constraint, b: Types.CustomType) => {
        val t = enviroment.entries.find(p => p.isInstanceOf[TypeEntry] && p.asInstanceOf[TypeEntry].identifier == b.id)
        t match {
          case Some(TypeEntry(_, _type: Types.Constraints)) => {
            canBeType(a, _type.constraints.find(p => p.name == a.name).get, enviroment) match {
              case Some(value) => Types.CustomType(b.id)
              case _           => None
            }
          }

          case _ => None
        }
        return Some(a)
      }

      case (a: Types.Type, b: Types.Constraint) => {
        canBeType(a, b.of.get, enviroment) match {
          case Some(value) => Some(b)
          case _           => None
        }
      }

      case _ => None
    }

    out
  }

  def checkType(a: Types.Type, b: Types.Type, enviroment: Enviroment): Option[AnalyzerResult] = {
    if (a == b) return Some(AnalyzerResult(a, enviroment))

    val res = (a, b) match {
      case (a: Types.Primitive, b: Types.Unknown) => {
        return Some(AnalyzerResult(a, enviroment.withType(b.id, a)))
      }

      case (a: Types.Tuple, b: Types.Tuple) => {
        val zipped = a.fields.zip(b.fields);
        var env = enviroment;
        var values: List[Types.Type] = List();

        for ((a, b) <- zipped) {

          val res = checkType(a, b, env);
          if (res == None) return None;
          env = res.get.enviroment;
          values = values ++ List(res.get._type)
        }
        Some(
          AnalyzerResult(
            Types.Tuple(values, List()),
            env
          )
        );
      }

      case (a: Types.Type, b: Types.Constraint) => {
        checkType(a, b.of.getOrElse(Types.Unit()), enviroment) match {
          case Some(value) => {
            Some(
              AnalyzerResult(
                Types.Constraint(
                  b.name,
                  b.of,
                  b.generics.map((g) => {
                    value.enviroment.types().find(v => v.identifier == g) match {
                      case Some(v) => v._type.toString()
                      case None    => g
                    }
                  })
                ),
                value.enviroment
              )
            )
          }
          case _ => None
        }
      }

      case (a: Types.Constraint, b: Types.CustomType) => {
        enviroment.findType(b.id) match {
          case Some(TypeEntry(name, _type: Types.Constraints)) => {
            _type.constraints.find(v => v.name == a.name) match {
              case Some(v) => {
                checkType(a, v, enviroment.addTypes(b.generics.map(v => TypeEntry(v, Types.Unknown(v)))))
              }
              case _ => None
            }
          }
          case _ => None
        }
      }

      case _ => {
        println("Unable to find for " + a)
        println("Unable to find for " + b)
        None
      }
    }

    // println("a", a)
    // println("b", b)
    // println(res.get)
    res

  }

  def evaluate(tree: Trees.Constructor, enviroment: Enviroment): T = {
    val t = enviroment.findType(tree.identifier)
    evaluate(tree.values, enviroment) match {
      case Some(res) => {
        val i = checkType(res._type, t.get._type, enviroment)

        return Some(AnalyzerResult(i.get._type, enviroment))
        // findType(tree, enviroment) match {
        //   case Some(TypeEntry(_, _type: Types.Type)) => {
        //      val t = evaluate(tree.values, enviroment)
        //     val res = checkType(t.get._type, res._type, enviroment)

        //     // canBeType(t.get._type, _type, enviroment) match {
        //     //   case Some(value) => Some(AnalyzerResult(value, enviroment.withType(tree, value)))
        //     //   case None        => None
        //     // }

        //     throw new Error("TEST")
        //   }

        //   case Some(TypeEntry(_, _type: Types.Constraint))
        //       if (_type.of == None && res._type == Types.Unit()) || _type.of.get == res._type => {
        //     return Some(AnalyzerResult(_type, enviroment))
        //   }

        //   case _ => None
        // }
      }
      case None => None
    }

  }

  def evaluate(tree: Trees.Tokens.Unit, enviroment: Enviroment): T = {
    return Some(AnalyzerResult(Types.Unit(), enviroment))
  }

  def evaluate(tree: Trees.Tree, enviroment: Enviroment): T = {
    tree match {
      case a: Trees.Tokens.IntLit    => evaluate(a, enviroment)
      case a: Trees.Tokens.DoubleLit => evaluate(a, enviroment)
      case a: Trees.Tokens.CharLit   => evaluate(a, enviroment)
      case a: Trees.Tokens.Bool      => evaluate(a, enviroment)
      case a: Trees.Recursive        => evaluate(a, enviroment)
      case a: Trees.Tokens.FloatLit  => evaluate(a, enviroment)
      case a: Trees.Substitutions    => evaluate(a, enviroment)
      case a: Trees.LetBinding       => evaluate(a, enviroment)
      case a: Trees.Tuple            => evaluate(a, enviroment)
      case a: Trees.Constructor      => evaluate(a, enviroment)
      case a: Trees.If               => evaluate(a, enviroment)
      case a: Trees.LetBindingExpr   => evaluate(a, enviroment)
      case a: Trees.OperatorExpr     => evaluate(a, enviroment)
      case a: Trees.Identifier       => evaluate(a, enviroment)
      case a: Trees.Record           => evaluate(a, enviroment)
      case a: Trees.Assignment       => evaluate(a, enviroment)
      case a: Trees.TypeDeclaration  => evaluate(a, enviroment)
      case a: Trees.ArrayList        => evaluate(a, enviroment)
      case a: Trees.Tokens.Unit      => evaluate(a, enviroment)
      case _ => {
        None
      }
    }
  }

  def log(tree: Trees.Tree, enviroment: Enviroment): Unit = {
    // println(tree)
    // println(enviroment.prettyPrint)
  }

  def evaluate(tree: Trees.OperatorExpr, enviroment: Enviroment): T = {
    val left = evaluate(tree.left, enviroment)
    val right = evaluate(tree.right, enviroment)

    (left, tree.operator, right) match {
      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.Plus,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Integer(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Integer())
              .withType(tree.right, Types.Integer())
          )
        )
      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.Minus,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Integer(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Integer())
              .withType(tree.right, Types.Integer())
          )
        )
      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.FloatPlus,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Float](l) && canBeType[Types.Float](r) =>
        Some(
          AnalyzerResult(
            Types.Float(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Float())
              .withType(tree.right, Types.Float())
          )
        )
      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.GreaterThan,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Bool(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Integer())
              .withType(tree.right, Types.Integer())
          )
        )

      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.LessThan,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Bool(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Integer())
              .withType(tree.right, Types.Integer())
          )
        )

      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.Multiply,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Integer(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Integer())
              .withType(tree.right, Types.Integer())
          )
        )
      case (
            Some(AnalyzerResult(l, le)),
            op: Trees.Tokens.DoublePlus,
            Some(AnalyzerResult(r, re))
          ) if canBeType[Types.Double](l) && canBeType[Types.Double](r) =>
        Some(
          AnalyzerResult(
            Types.Double(),
            enviroment
              .copyWith(le.entries)
              .copyWith(re.entries)
              .withType(tree.left, Types.Double())
              .withType(tree.right, Types.Double())
          )
        )
      case _ => {

        None
      }
    }
  }

  def evaluate(tree: Trees.TypeDeclaration, enviroment: Enviroment): T = {
    def getType(
        _type: Trees.TypeExp,
        name: Option[String],
        enviroment: Enviroment,
        generics: List[String]
    ): Option[Types.Type] = {
      _type match {
        case value: Trees.TypeUsage => {
          enviroment.entries
            .filter(entry => entry.isInstanceOf[TypeEntry])
            .find(entry => entry.asInstanceOf[TypeEntry].identifier == value.identifier) match {
            case Some(value) => Some(value.asInstanceOf[TypeEntry]._type)
            case None        => None
          }
        }

        case value: Trees.TypeOption => {
          enviroment.entries
            .filter(entry => entry.isInstanceOf[TypeEntry])
            .find(entry => entry.asInstanceOf[TypeEntry].identifier == value.identifier) match {
            case Some(value) => Some(value.asInstanceOf[TypeEntry]._type)
            case None        => None
          }
        }

        case value: Trees.TypeTuple => {
          Some(
            Types.Tuple(
              value.value.map((v) => getType(v, None, enviroment, generics).get),
              List()
            )
          )
        }

        case value: Trees.TypeFieldDeclarations =>
          Some(
            Types.Record(
              name.getOrElse(""),
              value.definitions.map(v => Types.RecordField(v.key, getType(v._type, None, enviroment, generics).get)),
              List()
            )
          )
        case value: Trees.TypeEquation => getType(value.definitions, None, enviroment, generics)
        case value: Trees.TypeConstraints =>
          Some(
            Types.Constraints(
              name.get,
              value.definitions.map(v => {
                v.of match {
                  case Some(value) =>
                    Types.Constraint(
                      v.name,
                      getType(
                        value,
                        None,
                        enviroment,
                        generics
                      ),
                      generics
                    )
                  case None => Types.Constraint(v.name, None, generics)
                }
              }),
              generics
            )
          )
        case Trees.TypePrimitive(key) if key == "float" => Some(Types.Float())
        case Trees.TypePrimitive(key) if key == "int"   => Some(Types.Integer())
        case Trees.TypePrimitive(key) => {
          enviroment.entries
            .filter(entry => entry.isInstanceOf[TypeEntry])
            .find(entry => entry.asInstanceOf[TypeEntry].identifier == key) match {
            case Some(value) => Some(value.asInstanceOf[TypeEntry]._type)
            case None        => None
          }
        }
        case _ => None
      }
    }

    tree.information match {
      case Trees.TypeEquation(_type) => {
        Some(
          AnalyzerResult(
            Types.Unit(),
            enviroment
              .addType(
                TypeEntry(
                  tree.identifier,
                  getType(
                    tree.information,
                    Some(tree.identifier),
                    enviroment
                      .addTypes(
                        tree.options.map(v => TypeEntry(v.identifier, Types.Unknown(v.identifier)))
                      )
                      .addType(
                        TypeEntry(
                          tree.identifier,
                          Types.CustomType(tree.identifier, tree.options.map(v => v.identifier))
                        )
                      ),
                    tree.options.map(v => v.identifier)
                  ).get
                )
              )
          )
        )
      }
      case _type: Trees.TypeFieldDeclarations =>
        Some(
          AnalyzerResult(
            Types.Unit(),
            enviroment.addType(
              TypeEntry(
                tree.identifier,
                getType(
                  _type,
                  Some(tree.identifier),
                  enviroment
                    .addTypes(
                      tree.options.map(v => TypeEntry(v.identifier, Types.Unknown(v.identifier)))
                    )
                    .addType(
                      TypeEntry(tree.identifier, Types.CustomType(tree.identifier, tree.options.map(v => v.identifier)))
                    ),
                  tree.options.map(v => v.identifier)
                ).get
              )
            )
          )
        )
      case _type: Trees.TypeConstraints =>
        Some(
          AnalyzerResult(
            Types.Unit(),
            enviroment.addType(
              TypeEntry(
                tree.identifier,
                getType(
                  _type,
                  Some(tree.identifier),
                  enviroment
                    .addTypes(
                      tree.options.map(v => TypeEntry(v.identifier, Types.Unknown(v.identifier)))
                    )
                    .addType(
                      TypeEntry(tree.identifier, Types.CustomType(tree.identifier, tree.options.map(v => v.identifier)))
                    ),
                  tree.options.map(v => v.identifier)
                ).get
              )
            )
          )
        )

    }
  }

  def evaluate(tree: Trees.Tokens.IntLit, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Integer(), enviroment)
    )
  }

  def evaluate(tree: Trees.Tokens.DoubleLit, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Double(), enviroment)
    )
  }

  def evaluate(tree: Trees.Tokens.CharLit, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Char(), enviroment)
    )
  }

  def findType(tree: Trees.Constructor, enviroment: Enviroment): Option[TypeEntry] = {
    val types = enviroment.entries.filter(v => v.isInstanceOf[TypeEntry]).asInstanceOf[List[TypeEntry]]
    types.reverse.foreach(_type => {
      _type._type match {
        case constr: Types.Constraints => {
          constr.constraints.find(p => p.name == tree.identifier) match {
            case Some(_) => {
              return Some(TypeEntry(_type.identifier, _type._type))
            }
            case None =>
          }
        }
      }
    })
    None
  }

  def findType(tree: Trees.Record, enviroment: Enviroment): Option[TypeEntry] = {
    val types = enviroment.entries.filter(v => v.isInstanceOf[TypeEntry]).asInstanceOf[List[TypeEntry]]
    types.reverse.map(_type => {
      _type._type match {
        case Types.Record(_, fields, generics) if fields.length == tree.entries.length => {
          if (
            fields.forall((b) => {
              val entry = tree.entries.find(v => v.key == b.key);
              entry match {
                case Some(v) => {
                  evaluate(v.value, enviroment).get._type == b._type
                }
                case None => false
              }
            })
          )
            return Some(_type)
        }
      }
    })

    None
  }

  def evaluate(tree: Trees.Record, enviroment: Enviroment): T = {
    findType(tree, enviroment) match {
      case Some(value) => Some(AnalyzerResult(value._type, enviroment))
      case None        => None
    }
  }

  def evaluate(tree: Trees.Tokens.Bool, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Bool(), enviroment)
    )
  }

  def evaluate(tree: Trees.Tokens.FloatLit, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Float(), enviroment)
    )
  }

  def evaluate(tree: Trees.Identifier, enviroment: Enviroment): T = {
    enviroment.lookup(tree.value) match {
      case Some(value) => {
        Some(AnalyzerResult(value._type, enviroment))
      }
      case None => None
    }
  }

  def evaluate(tree: Trees.Assignment, enviroment: Enviroment): T = {

    enviroment.lookup(tree.variable.value) match {
      case None => {
        evaluate(tree.exprs, enviroment) match {

          case Some(out) => {
            Some(
              AnalyzerResult(
                out._type,
                enviroment.copyWith(ValEntry(tree.variable.value, out._type))
              )
            )
          }
          case _ => {

            None
          }
        }

      }
      case _ => {

        None
      }
    }
  }

  def evaluate(tree: Trees.If, enviroment: Enviroment): T = {
    log(tree, enviroment)
    val result = evaluate(tree.expr, enviroment)

    evaluate(tree.expr, enviroment) match {
      case Some(AnalyzerResult(_: Types.Bool, enviroment)) => {

        val thn = evaluate(tree.thn, enviroment)
        val els = evaluate(tree.els, enviroment)

        (thn, els) match {
          case (
                Some(AnalyzerResult(thnType, le)),
                Some(AnalyzerResult(elsType, re))
              ) if elsType == thnType => {
            return Some(AnalyzerResult(thnType, le.copyWith(re.entries)))
          }

          case (
                Some(AnalyzerResult(thnType, le)),
                Some(AnalyzerResult(elsType, re))
              ) if thnType.isInstanceOf[Types.Unknown] && !elsType.isInstanceOf[Types.Unknown] => {
            return Some(AnalyzerResult(elsType, le.copyWith(re.entries)))
          }

          case (
                Some(AnalyzerResult(thnType, le)),
                Some(AnalyzerResult(elsType, re))
              ) if !thnType.isInstanceOf[Types.Unknown] && elsType.isInstanceOf[Types.Unknown] => {
            return Some(AnalyzerResult(thnType, le.copyWith(re.entries)))
          }

          case _ => {

            None
          }
        }
      }

      case _ => {

        None
      }
    }

  }

  def evaluate(trees: List[Trees.Tree], enviroment: Enviroment): T = {
    trees match {
      case head :: Nil => {
        evaluate(head, enviroment)
      }
      case head :: rest => {
        evaluate(head, enviroment) match {
          case Some(a) => evaluate(rest, a.enviroment)
          case None    => None
        }
      }
      case Nil => None
    }
  }

  def evaluate(prog: Trees.Program): T = {
    val result = evaluate(prog.statements, Enviroment(List()))
    result
  }

  def evaluate(tree: Trees.Substitutions, enviroment: Enviroment): T = {
    log(tree, enviroment)

    evaluate(tree.value_name, enviroment) match {
      case Some(AnalyzerResult(func: Types.Function, enviroment)) => {
        evaluate(tree.values, enviroment) match {
          case Some(arg) if arg._type == func.input => {
            return Some(AnalyzerResult(func.output, enviroment))
          }

          case Some(arg) if func.input.isInstanceOf[Types.Unknown] && func.output.isInstanceOf[Types.Unknown] => {
            if (func.input.asInstanceOf[Types.Unknown].id == func.output.asInstanceOf[Types.Unknown].id)
              return Some(AnalyzerResult(arg._type, enviroment))
            else
              return Some(AnalyzerResult(func.output, enviroment))
          }

          case Some(arg) if func.input.isInstanceOf[Types.Unknown] => {
            return Some(AnalyzerResult(func.output, enviroment))
          }

          case Some(arg) if arg._type.isInstanceOf[Types.Unknown] && !func.input.isInstanceOf[Types.Unknown] => {
            return Some(AnalyzerResult(func.output, enviroment.withType(tree.values, func.input)))
          }

          case Some(arg) => {
            return None
          }
          case _ => {

            None
          }
        }

      }
      case Some(AnalyzerResult(func: Types.ArrayList, enviroment)) => {
        evaluate(tree.values, enviroment) match {
          case Some(arg) if arg._type.isInstanceOf[Types.Integer] => {
            return Some(AnalyzerResult(func._type, enviroment))
          }
          case _ => None
        }

      }
      case _ => {
        print("Failed sub...", tree.value_name, enviroment)
        return None
      }
    }

  }
}
