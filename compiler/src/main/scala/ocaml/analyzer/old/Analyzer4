import ocaml.trees._
import ocaml.types._
import ocaml.enviroment._

case class AnalyzerResult(_type: Types.Type, enviroment: Enviroment, tree: Trees.Tree) extends PrettyPrint {
  override def toString() = {
    "AnalyzerResult(" + _type + "," + enviroment + ")"
  }

  def prettyPrint: String = {
    enviroment.prettyPrint + "\n" + _type.prettyPrint
  }
}

object Analyzer {
  type T = Option[AnalyzerResult]

  def canBeType[Q](value: Any) = {
    value.isInstanceOf[Q] || value.isInstanceOf[Types.Unknown]
  }

  def evaluate(tree: Trees.Tree, enviroment: Enviroment): T = {
    tree match {
      case a: Trees.Tokens.IntLit => evaluate(a, enviroment)
      case a: Trees.Substitutions => evaluate(a, enviroment)
      case a: Trees.LetBinding    => evaluate(a, enviroment)
      case a: Trees.OperatorExpr  => evaluate(a, enviroment)
      case a: Trees.Identifier    => evaluate(a, enviroment)
      case a: Trees.Assignment    => evaluate(a, enviroment)
      case _                      => None
    }
  }

  def evaluate(tree: Trees.Identifier, enviroment: Enviroment): T = {
    enviroment.lookup(tree) match {
      case Some(value) => {
        Some(AnalyzerResult(value._type, enviroment, value.tree))
      }
      case None => None
    }
  }

  def evaluate(tree: Trees.LetBinding, enviroment: Enviroment): T = {
    evaluate(
      tree.expression,
      enviroment.copyWith(
        ValEntry(tree.identifier, Types.Unknown("'" + tree.identifier.value), tree)
      )
    ) match {
      case Some(value) => {
        val _type = value.enviroment.lookup(tree.identifier).get._type
        Some(AnalyzerResult(Types.Function(_type, value._type), value.enviroment, tree))
      }
      case None => None
    }
  }

  def evaluate(tree: Trees.OperatorExpr, enviroment: Enviroment): T = {
    val left = evaluate(tree.left, enviroment)
    val right = evaluate(tree.right, enviroment)

    (left, tree.operator, right) match {
      case (
            Some(AnalyzerResult(l, _, _)),
            op: Trees.Tokens.Plus,
            Some(AnalyzerResult(r, _, _))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Integer(),
            enviroment.replace(tree.left, Types.Integer()).replace(tree.right, Types.Integer()),
            tree
          )
        )
      case (
            Some(AnalyzerResult(l, _, _)),
            op: Trees.Tokens.Multiply,
            Some(AnalyzerResult(r, _, _))
          ) if canBeType[Types.Integer](l) && canBeType[Types.Integer](r) =>
        Some(
          AnalyzerResult(
            Types.Integer(),
            enviroment.replace(tree.left, Types.Integer()).replace(tree.right, Types.Integer()),
            tree
          )
        )
      case _ => None
    }
  }

  def evaluate(tree: Trees.Substitutions, enviroment: Enviroment): T = {
    evaluate(tree.value_name, enviroment) match {
      case Some(func) => {
        evaluate(tree.values, enviroment) match {
          case Some(arg) => {
            println("func", func.tree)
            println("arg", arg.tree)

            val result = evaluate(
              func.tree,
              enviroment.copyWith(
                List(
                  ValEntry(
                    func.tree.asInstanceOf[Trees.LetBinding].identifier,
                    arg._type,
                    arg.tree
                  )
                )
              )
            ) match {
              case Some(value) => value
              case _           => return None
            }

            result._type match {
              case t: Types.Function => {
                return Some(AnalyzerResult(t.output, enviroment, result.tree))
              }
              case _ => None
            }

            return None
          }

          case _ => None

        }
        // t._type match {
        //   case func: Types.Function => {
        //     println("Test")
        //     evaluate(t.tree, t.enviroment.replace(t.tree.asInstanceOf[Trees.LetBinding].identifier)) match {
        //       case Some(output) => {
        //         return Some(
        //           AnalyzerResult(func.output, output.enviroment, tree)
        //         )
        //       }
        //       case _ => return None
        //     }
        //   }
        //   case _ => return None
        // }

      }
      case _ => return None
    }

  }

  def evaluate(tree: Trees.Tokens.IntLit, enviroment: Enviroment): T = {
    Some(
      AnalyzerResult(Types.Integer(), enviroment, tree)
    )
  }

  def evaluate(tree: Trees.Assignment, enviroment: Enviroment): T = {

    enviroment.lookup(tree.variable) match {
      case None => {
        evaluate(tree.exprs, enviroment) match {
          case Some(value) => {
            Some(
              AnalyzerResult(
                value._type,
                enviroment.copyWith(
                  ValEntry(tree.variable, value._type, tree.exprs)
                ),
                tree.exprs
              )
            )
          }
          case None => None
        }
      }
      case Some(value) => None
    }
  }

  def evaluate(trees: List[Trees.Tree], enviroment: Enviroment): T = {
    trees match {
      case head :: Nil => {
        evaluate(head, enviroment)
      }
      case head :: rest => {
        evaluate(head, enviroment) match {
          case Some(a) => evaluate(rest, a.enviroment)
          case None    => None
        }
      }
      case Nil => None
    }
  }

  def evaluate(prog: Trees.Program): T = {

    val result = evaluate(prog.statements, Enviroment(List()))
    result
  }
}
